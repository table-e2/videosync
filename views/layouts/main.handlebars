<!DOCTYPE html>
	<head>
		<meta charset="utf-8">
		<meta http-equiv="X-UA-Compatible" content="IE=edge">
		<title>Videosync</title>
		<meta name="description" content="ðŸš¿">
		<meta name="viewport" content="width=device-width, initial-scale=1">
		<link href="https://fonts.googleapis.com/css?family=Alata&display=swap" rel="stylesheet"> 
		<style>
			
body {
	margin: 0;
	font-family: "Alata", sans-serif;
	font-size: 1.7em;
	color: #eee;
	background: #111;
	display: flex;
	flex-direction: column;
	align-items: center;
	min-height: 100vh;
}

button, input {
	border-radius: 5px;
	background-color: #eee;
	color: #111;
	padding: 0.5em 0.7em;
	font-size: 0.5em;
	margin: 1em;
	font-weight: bold;
}

video {
	max-width: 100vw;
	max-height: 100vh;
	padding-bottom: 1em;
}

p {
	max-width: 30em;
	margin: 0.5em;
}

a {
	color: rgb(128, 127, 194);
	text-decoration: none;
}
a:hover {
	color: rgb(173, 168, 214);
	text-decoration: underline;
}
a:visited {
	color: rgb(180, 118, 199);
}
a:visited:hover {
	color: rgb(203, 168, 214);
}
.form, .qrcode {
	background-color: #333;
	border-radius: 20px;
	padding: 0.8em;
	margin: 0.5em;
}

footer {
	font-size: 0.7em;
	text-align: center;
	margin: 2em 0;
}
			
		</style>
		<script>
		
const apiUrl = "";
const uploadUrl = apiUrl + "/upload";
const hostUrl = apiUrl + "/RequestWater";
const websocketUrl = "ws://" + window.location.host + "/faucet";
var tokens = {};

{{#if videoID}}
const videoID = "{{videoID}}"; 
{{/if}}

// Easier function to get an element
function id(name) {
	return document.getElementById(name);
}

// Cookie framework from MDN
var docCookies = {

	// Cookie framework from MDN
	/*\
	|*|
	|*|  :: cookies.js ::
	|*|
	|*|  A complete cookies reader/writer framework with full unicode support.
	|*|
	|*|  Revision #3 - July 13th, 2017
	|*|
	|*|  https://developer.mozilla.org/en-US/docs/Web/API/document.cookie
	|*|  https://developer.mozilla.org/User:fusionchess
	|*|  https://github.com/madmurphy/cookies.js
	|*|
	|*|  This framework is released under the GNU Public License, version 3 or later.
	|*|  http://www.gnu.org/licenses/gpl-3.0-standalone.html
	|*|
	|*|  Syntaxes:
	|*|
	|*|  * docCookies.setItem(name, value[, end[, path[, domain[, secure]]]])
	|*|  * docCookies.getItem(name)
	|*|  * docCookies.removeItem(name[, path[, domain]])
	|*|  * docCookies.hasItem(name)
	|*|  * docCookies.keys()
	|*|
	\*/
	getItem: function(sKey) {
		if (!sKey) {
			return null;
		}
		return decodeURIComponent(document.cookie.replace(new RegExp("(?:(?:^|.*;)\\s*" + encodeURIComponent(sKey).replace(/[\-\.\+\*]/g, "\\$&") + "\\s*\\=\\s*([^;]*).*$)|^.*$"), "$1")) || null;
	},
	setItem: function(sKey, sValue, vEnd, sPath, sDomain, bSecure) {
		if (!sKey || /^(?:expires|max\-age|path|domain|secure)$/i.test(sKey)) {
			return false;
		}
		var sExpires = "";
		if (vEnd) {
			switch (vEnd.constructor) {
				case Number:
					sExpires = vEnd === Infinity ? "; expires=Fri, 31 Dec 9999 23:59:59 GMT" : "; max-age=" + vEnd;
					/*
					Note: Despite officially defined in RFC 6265, the use of `max-age` is not compatible with any
					version of Internet Explorer, Edge and some mobile browsers. Therefore passing a number to
					the end parameter might not work as expected. A possible solution might be to convert the the
					relative time to an absolute time. For instance, replacing the previous line with:
					*/
					/*
					sExpires = vEnd === Infinity ? "; expires=Fri, 31 Dec 9999 23:59:59 GMT" : "; expires=" + (new Date(vEnd * 1e3 + Date.now())).toUTCString();
					*/
					break;
				case String:
					sExpires = "; expires=" + vEnd;
					break;
				case Date:
					sExpires = "; expires=" + vEnd.toUTCString();
					break;
			}
		}
		document.cookie = encodeURIComponent(sKey) + "=" + encodeURIComponent(sValue) + sExpires + (sDomain ? "; domain=" + sDomain : "") + (sPath ? "; path=" + sPath : "") + (bSecure ? "; secure" : "");
		return true;
	},
	removeItem: function(sKey, sPath, sDomain) {
		if (!this.hasItem(sKey)) {
			return false;
		}
		document.cookie = encodeURIComponent(sKey) + "=; expires=Thu, 01 Jan 1970 00:00:00 GMT" + (sDomain ? "; domain=" + sDomain : "") + (sPath ? "; path=" + sPath : "");
		return true;
	},
	hasItem: function(sKey) {
		if (!sKey || /^(?:expires|max\-age|path|domain|secure)$/i.test(sKey)) {
			return false;
		}
		return (new RegExp("(?:^|;\\s*)" + encodeURIComponent(sKey).replace(/[\-\.\+\*]/g, "\\$&") + "\\s*\\=")).test(document.cookie);
	},
	keys: function() {
		var aKeys = document.cookie.replace(/((?:^|\s*;)[^\=]+)(?=;|$)|^\s*|\s*(?:\=[^;]*)?(?:\1|$)/g, "").split(/\s*(?:\=[^;]*)?;\s*/);
		for (var nLen = aKeys.length, nIdx = 0; nIdx < nLen; nIdx++) {
			aKeys[nIdx] = decodeURIComponent(aKeys[nIdx]);
		}
		return aKeys;
	}
};

function setToken(t, vid) {
	tokens[vid] = t;
	docCookies.setItem("tokens", JSON.stringify(tokens));
}

function getLocalTokens() {
	tokens = JSON.parse(docCookies.getItem("tokens")) || {};
}

// Request host
function requestHost() {
	let password = id("password").value;

	let xhr = new XMLHttpRequest();
	xhr.addEventListener("load", (_event) => console.log("Host request received"));
	xhr.addEventListener("load", (event) => {
		let response = JSON.parse(xhr.response);
		console.log(response);
		setToken(response.token, videoID);
		manageHost(id("video"));
		id("youarehost").removeAttribute("hidden");
	})
	xhr.open("POST", hostUrl);
	xhr.setRequestHeader("Content-Type", "application/json");
	xhr.send(JSON.stringify({"password": password, "videoID": videoID}));
	console.log("Host request sent");
}

// Create a new session
function upload() {
	// Grab details from form
	let file = id("video_file").files[0];
	let password = id("password").innerText;
	console.log(file.name);

	let form = new FormData();
	form.append("file", file);
	form.append("password", password);

	let progress = id("progress");
	let xhr = new XMLHttpRequest();

	// What to do when in progress
	xhr.upload.addEventListener("progress", (event) => {
		if (event.lengthComputable) {
			let percent = event.loaded / event.total;
			progress.innerText = String(Math.floor(percent * 100)) + "%";
		} else {
			progress.innerText = "Uploading...";
		}
	});

	// What to do when finished
	xhr.upload.addEventListener("load", (event) => {
		console.log("Finished sending");
		setToken(xhr.response.token, xhr.response.videoID);
		let newUrl = window.location.origin + '/watch/' + xhr.response.videoID;
		// redirect to url
		window.location = newUrl;
	});

	xhr.open("POST", uploadUrl);
	xhr.setRequestHeader("Content-Type", "multipart/form-data");
	// Send request
	xhr.send(form);

	console.log("Sent form");

	progress.removeAttribute("hidden");
}
var socket;
var fromServer = false;

function manageControls(video) {
    socket = new WebSocket(websocketUrl);
    socket.addEventListener("open", () => {

        socket.send(JSON.stringify({
            "type": "start",
            "videoID": videoID
        }));


        socket.addEventListener("message", (message) => {
			fromServer = true;
            let data = JSON.parse(message.data);
			video.currentTime = data.timeStamp;
			if (data.type === "pause") {
				video.pause();
			} else if (data.type === "play") {
				video.play();
			}
        });
    });
}

function manageHost(video) {
    if (videoID in tokens) {
        for (let prop of ["play", "pause", "seeked"]) {
            if (prop === "seeked" && !video.paused) {
                prop = "play";
            }
			if (prop === "play") {
				video.play();
				video.currentTime = Math.max(0, video.currentTime - 100);
			}
            video.addEventListener(prop, (event) => {
                debounceControlRequest(prop, socket, video);
            });
        }
    }
}

var timeout;
function debounceControlRequest(prop, socket, video) {
	clearTimeout(timeout);
	timeout = setTimeout(() => {
		if (fromServer) {
			fromServer = false;
			return;
		}
		console.log(tokens);
		let message = {
			"token": tokens[videoID],
			"timeStamp": video.currentTime,
			"type": prop,
			"videoID": videoID
		};
		console.log(message);
		socket.send(JSON.stringify(message));
	}, 100);
}

window.addEventListener("load", () => {
	getLocalTokens();
	
	{{#if videoID}}
	id("password").addEventListener("keyup", event => {
		if (event.key === 'Enter') {
			requestHost();
		}
	});
	
	manageControls(id("video"));
	{{/if}}
});
	
		</script>
	</head>
	<body>
		{{{body}}}
	</body>
	<footer>
		<p>Created by Team Table E2 at HackDavis 2020 in 24 hours.</p>
		<p><a target="_blank" rel="noopener noreferrer" href="//github.com/table-e2/videosync">Repository</a></p>
	</footer>
</html>